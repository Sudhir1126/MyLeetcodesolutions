class Solution {
    public int rangeBitwiseAnd(int left, int right) {
        int shift = 0;
        while(left < right){
            left >>= 1;
            right >>= 1;
            shift++;
        }
        return left << shift;
    }
}

Initialization:

left = 5 (binary: 101)
right = 7 (binary: 111)
shift = 0
While Loop:

Iteration 1:
left >>= 1; (binary: 010)
right >>= 1; (binary: 011)
shift++ (shift = 1)
Iteration 2:
left >>= 1; (binary: 001)
right >>= 1; (binary: 001)
shift++ (shift = 2)
After the While Loop:

left = 0b001 (binary: 001)
Bitwise AND Result:

Since left now holds the common leftmost bits of the range [5, 7], we left-shift it by shift bits (2 bits) to restore its original position: left << shift = 0b100 (binary: 100)
So, the final result of the bitwise AND operation for the range [5, 7] is 0b100, which is 4 in decimal.
